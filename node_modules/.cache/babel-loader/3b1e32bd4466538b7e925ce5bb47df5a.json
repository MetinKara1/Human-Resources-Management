{"ast":null,"code":"import { applyMiddleware, compose, createStore } from 'redux';\nimport { useDispatch as useReduxDispatch, useSelector as useReduxSelector } from 'react-redux';\nimport createSagaMiddleware from 'redux-saga';\nimport { createLogger } from 'redux-logger';\nimport reducers from '../config/reducers';\nimport rootSaga from '../config/sagas';\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewareList = [sagaMiddleware];\n\nif (process.env.NODE_ENV === 'development') {\n  middlewareList.push(createLogger());\n}\n\nconst enhancers = [applyMiddleware(...middlewareList)];\nconst initialState = {\n  storage: {}\n};\nconst str = createStore(reducers, compose(...enhancers));\nsagaMiddleware.run(rootSaga);\nexport const store = str;\nexport const useDispatch = () => useReduxDispatch();\nexport const useSelector = useReduxSelector;\nstore.subscribe(() => {});","map":{"version":3,"sources":["/Users/metinkara/Documents/Human-Resources-Management/src/config/store.ts"],"names":["applyMiddleware","compose","createStore","useDispatch","useReduxDispatch","useSelector","useReduxSelector","createSagaMiddleware","createLogger","reducers","rootSaga","sagaMiddleware","middlewareList","process","env","NODE_ENV","push","enhancers","initialState","storage","str","run","store","subscribe"],"mappings":"AAAA,SAASA,eAAT,EAA0BC,OAA1B,EAAmCC,WAAnC,QAA4E,OAA5E;AACA,SAA+BC,WAAW,IAAIC,gBAA9C,EAAgEC,WAAW,IAAIC,gBAA/E,QAAuG,aAAvG;AACA,OAAOC,oBAAP,MAAqD,YAArD;AACA,SAASC,YAAT,QAA6B,cAA7B;AAGA,OAAOC,QAAP,MAAqB,oBAArB;AACA,OAAOC,QAAP,MAAqB,iBAArB;AAEA,MAAMC,cAAc,GAAGJ,oBAAoB,EAA3C;AACA,MAAMK,cAA4B,GAAG,CAACD,cAAD,CAArC;;AACA,IAAGE,OAAO,CAACC,GAAR,CAAYC,QAAZ,KAAyB,aAA5B,EAA0C;AACtCH,EAAAA,cAAc,CAACI,IAAf,CAAoBR,YAAY,EAAhC;AACH;;AAED,MAAMS,SAAS,GAAG,CAACjB,eAAe,CAAC,GAAGY,cAAJ,CAAhB,CAAlB;AACA,MAAMM,YAAY,GAAG;AACjBC,EAAAA,OAAO,EAAE;AADQ,CAArB;AAKA,MAAMC,GAAG,GAAGlB,WAAW,CAACO,QAAD,EAAWR,OAAO,CAAC,GAAGgB,SAAJ,CAAlB,CAAvB;AACAN,cAAc,CAACU,GAAf,CAAmBX,QAAnB;AAEA,OAAO,MAAMY,KAAK,GAAGF,GAAd;AAEP,OAAO,MAAMjB,WAAW,GAAG,MAA2BC,gBAAgB,EAA/D;AACP,OAAO,MAAMC,WAA2C,GAAGC,gBAApD;AAEPgB,KAAK,CAACC,SAAN,CAAgB,MAAM,CAErB,CAFD","sourcesContent":["import { applyMiddleware, compose, createStore, Dispatch, Middleware } from 'redux';\nimport { TypedUseSelectorHook, useDispatch as useReduxDispatch, useSelector as useReduxSelector } from 'react-redux';\nimport createSagaMiddleware, { SagaMiddleware } from 'redux-saga';\nimport { createLogger } from 'redux-logger';\n\nimport { AppAction, AppState } from './types';\nimport reducers from '../config/reducers';\nimport rootSaga from '../config/sagas';\n\nconst sagaMiddleware = createSagaMiddleware();\nconst middlewareList: Middleware[] = [sagaMiddleware];\nif(process.env.NODE_ENV === 'development'){\n    middlewareList.push(createLogger());\n}\n\nconst enhancers = [applyMiddleware(...middlewareList)];\nconst initialState = { \n    storage: {\n\n    },\n};\nconst str = createStore(reducers, compose(...enhancers));\nsagaMiddleware.run(rootSaga);\n\nexport const store = str;\n\nexport const useDispatch = (): Dispatch<AppAction> => useReduxDispatch();\nexport const useSelector: TypedUseSelectorHook<AppState> = useReduxSelector;\n\nstore.subscribe(() => {\n\n});\n\n"]},"metadata":{},"sourceType":"module"}