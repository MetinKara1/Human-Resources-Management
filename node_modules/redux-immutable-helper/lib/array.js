"use strict";
// created with ❤ by Yaman Katby at 25 Mar 2019.
Object.defineProperty(exports, "__esModule", { value: true });
const utilities_1 = require("./utilities");
exports.array = (source) => {
    if (source === undefined || !Array.isArray(source)) {
        new TypeError(`Looks like the first parameter that you have passed to the array function isn't an array.`);
    }
    let result = source.slice();
    const push = (...elements) => {
        result = [...result, ...elements];
        return publicAPI;
    };
    const unshift = (...elements) => {
        result = [...elements, ...result];
        return publicAPI;
    };
    const pop = (count = 1) => {
        result = result.slice(0, result.length - count);
        return publicAPI;
    };
    const shift = (count = 1) => {
        result = result.slice(count);
        return publicAPI;
    };
    const concat = (target) => {
        result = [...result, ...target];
        return publicAPI;
    };
    const replace = (index, element) => {
        const indexer = utilities_1.findIndex(result, index);
        const target = typeof element === 'function' ? element.call(undefined, result[indexer]) : element;
        result = [...result.slice(0, indexer), target, ...result.slice(indexer + 1)];
        return publicAPI;
    };
    const insertAfter = (index, ...elements) => {
        const indexer = utilities_1.findIndex(result, index);
        result = [...result.slice(0, indexer + 1), ...elements, ...result.slice(indexer + 1)];
        return publicAPI;
    };
    const insertBefore = (index, ...elements) => {
        const indexer = utilities_1.findIndex(result, index);
        result = [...result.slice(0, indexer), ...elements, ...result.slice(indexer)];
        return publicAPI;
    };
    const remove = (index) => {
        const indexer = utilities_1.findIndex(result, index);
        result = [...result.slice(0, indexer), ...result.slice(indexer + 1)];
        return publicAPI;
    };
    const removeAll = (indexes) => {
        const indexer = utilities_1.findIndexes(result, indexes).sort().reverse();
        indexer.forEach((index) => {
            result = [...result.slice(0, index), ...result.slice(index + 1)];
        });
        return publicAPI;
    };
    const toArray = () => {
        return result;
    };
    const publicAPI = {
        push,
        unshift,
        pop,
        shift,
        concat,
        replace,
        insertAfter,
        insertBefore,
        remove,
        removeAll,
        toArray,
    };
    return publicAPI;
};
