"use strict";
// created with ❤ by Yaman Katby at 08 May 2019.
Object.defineProperty(exports, "__esModule", { value: true });
exports.forIn = (source, callbackFn) => {
    Object.getOwnPropertyNames(source).forEach((_, index) => {
        const key = _;
        callbackFn(key, source[key], index);
    });
};
exports.mapIn = (source, predicate) => {
    const result = [];
    exports.forIn(source, ((key, value, index) => {
        result.push(predicate(key, value, index));
    }));
    return result;
};
exports.deepFreeze = (source) => {
    if (typeof source !== 'object' || source === null) {
        return;
    }
    Object.freeze(source);
    exports.forIn(source, (key, value) => {
        if (source.hasOwnProperty(key) && typeof value === 'object' && value !== null && !Object.isFrozen(value)) {
            exports.deepFreeze(source[key]);
        }
    });
};
exports.deepClone = (source) => {
    if (typeof source !== 'object' || source === null) {
        return source;
    }
    let result;
    if (Array.isArray(source)) {
        result = [];
        source.forEach(element => {
            result.push(exports.deepClone(element));
        });
    }
    else {
        result = {};
        exports.forIn(source, (key, value) => {
            result[key] = exports.deepClone(value);
        });
    }
    return result;
};
exports.findIndex = (source, index) => {
    if (typeof index !== 'number' && typeof index !== 'function') {
        throw new TypeError('Look\'s like your index nor number neither function.');
    }
    return typeof index === 'function' ? source.findIndex(index) : index;
};
exports.findIndexes = (source, indexes) => {
    if (typeof indexes !== 'function' && !Array.isArray(indexes)) {
        throw new TypeError('Look\'s like your index nor array of numbers neither function.');
    }
    if (typeof indexes === 'function') {
        const indexList = [];
        source.forEach((value, index) => {
            if (indexes(value)) {
                indexList.push(index);
            }
        });
        return indexList;
    }
    return indexes;
};
